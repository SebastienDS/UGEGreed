                                RFC

Résumé:
    Le but du projet UGEGreed est de réaliser un système de calcul distribué au dessus du protocole TCP.
    L'idée est d'aider les chercheurs qui veulent tester des conjectures sur un très grand nombre de cas
    en distribuant leurs calculs sur plusieurs machines.


Representation des données:
    Les entiers (INT) sur 4 octets signés et les longs (LONG) sur 8 octets signés sont tous transmis en BigEndian.
    Les octets signés seront désignés par (BYTE) et les suites d'octets par (BYTES)

    Les chaînes de caractères (STRING) sont encodées en UTF-8 et précédées de la taille de leur représentation en octets sur un INT.
        STRING = taille (INT) chaîne encodée en UTF-8

    Une adresse IP (IPADDRESS) est représentée par un octet valant 4 ou 6 selon que l'adresse est au format IPv4 ou IPv6
    suivi des 4 octets ou 16 octets de l'adresse selon qu'elle est IPv4 ou IPv6.

        IPv4:
            IPADDRESS = 4 (BYTE) adresse (4 BYTES)

        IPv6:
            IPADDRESS = 6 (BYTE) adresse (16 BYTES)


    Une adresse de socket (SOCKETADDRESS) contenant une adresse IP et un numéro de port est représentée un IPADDRESS suivi d'un INT valant entre 0 et 65 535.
        SOCKETADDRESS = adresse IP (IPADDRESS) + numéro de port entre 0 et 65 535 (INT)

    Les listes d'adresse (LIST_SOCKETADDRESS) seront envoyées au format suivant un INT donnant le nombre d'adresse
    dans la liste suivi des adresses de la liste au format (SOCKETADDRESS)


Routage:
    Chaque application va maintenir à tout instant, une table de routage qui indique pour chaque application du réseau
    laquelle de ses voisines est la plus proche de cette application

    Par exemple:
        A <=== B <=== C
        ^      ^
        |      |
        D      E

    Par exemple pour A, la table de routage sera:
    B -> B
    C -> B
    D -> D
    E -> B

    Pour l'application B, la table de routage sera:
    A -> A
    C -> C
    D -> A
    E -> E

    Quand une application voudra envoyer un message à une autre application du réseau, il lui suffira de regarder
    dans sa table de routage à quelle voisine transmettre le message. En recevant ce message, la voisine verra de même
    et ainsi de suite jusqu'à ce que le message atteigne sa destination.


Paquet:
    Tous les paquets sont constitués d'un header suivi du contenu du paquet (payload)


Header:
    Toutes les trames commencent par un octet signé appelé octet de routage qui peut valoir 0 (LOCAL), 1 (TRANSFERT) ou 2 (BROADCAST).
    Elles suivent l'un des trois formats généraux suivants:

        LOCAL: 0 (BYTE) opcode (BYTE)
        BROADCAST: 1 (BYTE) opcode (BYTE) adresse_src (SOCKETADDRESS)
        TRANSFERT: 2 (BYTE) opcode (BYTE) adresse_src (SOCKETADDRESS) adresse_dst (SOCKETADDRESS)



    Opcode est un octet signé qui indique le type du packet contenu dans le payload


    Trame LOCAL:
        Il n'y a aucun comportement particulier pour les trames LOCAL.

    Trame BROADCAST:
        1 (BYTE) opcode (BYTE) adresse_src (SOCKETADDRESS) payload (BYTES)

        elle transmet à l'identique la trame à toutes ses voisines à l'exception de la voisine qui est à l'origine de la trame.

    Trame TRANSFERT:
        2 (BYTE) opcode (BYTE) adresse_src (SOCKETADDRESS) adresse_dst (SOCKETADDRESS) payload (BYTES)

        si son adresse n'est pas adresse_dst (auquel cas, elle n'a rien à faire à part traiter la trame), 
        elle transmet la trame à l'identique à l'application voisine indiquée par sa table de routage pour l'identifiant adresse_dst

        Si l'identifiant adresse_dst n'est pas présent dans la table de routage, la trame est ignorée.




Connexion:
    type de transfert = LOCAL
    OPCODE = 00
    - LONG: taille des données d'authentification
    - n BYTES: données d'authentification
    - SOCKETADDRESS: l'adresse du serveur qui essaie de se connecter

    Paquet envoyé par un nouveau serveur indiquant qu'il souhaite rejoindre le réseau.
    Si l'on ne souhaite pas sécuriser le réseau, on peut mettre à 0 la taille des données d'authentification


Validation:
    type de transfert = LOCAL
    OPCODE = 01
    - LIST_SOCKETADDRESS: les adresses des membres du réseau

    Paquet envoyé par le serveur dans le réseau acceptant la connexion / reconnexion et lui indiquant la structure du réseau.
    Le serveur acceptant la connexion, ajoute le nouveau serveur dans sa table de routage.
    Le nouveau serveur rattache tous les serveurs du réseau au serveur l'ayant accepté.
    La 1ere adresse reçu devra obligatoirement etre le ROOT. Il doit connaitre le ROOT pour pouvoir s'y connecter si son parent se déconnecte


RefusConnexion:
    type de transfert = LOCAL
    OPCODE = 02

    Paqué envoyé en cas de refus de connexion au réseau


NouveauServeur:
    type de transfert = BROADCAST
    OPCODE = 03
    - SOCKETADDRESS: adresse du serveur qui vient de se connecter
      

    Paquet envoyé par le serveur ayant accepté un serveur dans le réseau.
    Le paquet est envoyé en broadcast vers tout le réseau pour que chaque membres du réseau connaissent le nouveau serveur


DemandeEtat:
    type de transfert = BROADCAST
    OPCODE = 04
    - SOCKETADDRESS: adresse du serveur demandant l'état

    Paquet envoyé par le serveur ayant reçu une demande de tâche d'un client.
    Ce paquet est envoyé en broadcast vers tout le réseau pour que chaque membres indiquent leur état.
    Le serveur pourra alors par la suite partager le travail de la meilleure façon


EtatServer:
    type de transfert = TRANSFERT
    OPCODE = 05
    - INT: nombre de tâches en cours sur le serveur

    Paquet envoyé en réponse au paquet DemandeEtat pour indiquer sa charge de travail


Tache:
    type de transfert = TRANSFERT
    OPCODE = 06
    - LONG: identifiant de la tâche
    - STRING: url encodé en UTF8
    - STRING: nom de la classe encodé en UTF8
    - LONG: valeur de début de la plage des valeurs
    - LONG: valeur de fin de la plage des valeurs

    Paquet envoyé par un serveur demandant d'effectuer une tâche à un autre serveur
    

RefusTache:
    type de transfert = TRANSFERT
    OPCODE = 07
    - LONG: identifiant de la tâche

    Paquet envoyé par un serveur refusant une tâche demandée


ReponseTache:
    type de transfert = TRANSFERT
    OPCODE = 08
    - LONG: identifiant de la tâche
    - BYTE: status de la tâche
    - (OPTIONNEL) STRING: réponse encodé en UTF8

    Paquet envoyé par un serveur effectuant une tâche contenant une réponse sur un nombre testé.
    Status possible:
        0 = super nickel
        1 = une exception a été levée
        2 = timeout
        3 = erreur lors du téléchargement du checker 
    Le paquet contient la STRING de réponse lorsque le status vaut 0    
    

AnnulationTache:
    type de transfert = TRANSFERT
    OPCODE = 09
    - LONG: identifiant de la tâche
    - LONG: début des valeurs qu'il reste à traiter

    Paquet envoyé par un serveur souhaitant quitter le réseau.
    Le serveur envoie des paquets d'annulations pour ne plus avoir de tâche à effectuer.
    Ce paquet indique également que le serveur n'acceptera plus aucune tâche.
    Grâce à ce paquet, le serveur ayant demandé la tâche pourra redonner la tâche à quelqu'un d'autre


Deconnexion:
    type de transfert = BROADCAST
    OPCODE = 10
    - SOCKETADDRESS: adresse du serveur qui se déconnecte

    Paquet envoyé par un serveur souhaitant quitter le réseau.
    Le ROOT est le seul serveur ne pouvant pas se déconnecter.
    Ce paquet sera envoyé en broadcast vers tous les membres du serveur pour que le réseau ne considère plus le serveur.
    La connexion (socket) sera fermée par le serveur envoyant les paquets lorsqu'il aura fini la procédure.
    Le serveur envoyant ce paquet n'accepte plus de connexion ni de tâche.
    Si un serveur a comme parent ce serveur, il doit se reconnecter au ROOT


Reconnexion:
    type de transfert = LOCAL
    OPCODE = 11
    - LONG: taille des données d'authentification
    - n BYTES: données d'authentification
    - LIST_SOCKETADDRESS: les adresses des serveurs connectés au sous-réseau
    
    Paquet envoyé par un serveur ayant déjà fait partie du réseau et qui souhaite s'y reconnecter.
    Si l'on ne souhaite pas sécuriser le réseau, on peut mettre à 0 la taille des données d'authentification



Sécurité:

    Pour éviter le grand banditisme, un serveur doit accepter un paquet serveur seulement si un paquet Connexion ou Reconnexion
    a déjà été accepté.
    Cela nous permet d'y ajouter une authentification des serveurs pour éviter que n'importe qui envoie n'importe quoi.



Exemple:

    On a un réseau déjà existant:

        ROOT <=== A <=== B
         ^
         |
         C

    Soit un serveur D qui souhaite se connecter à A qui formera le réseau suivant:

        ROOT <=== A <=== B
         ^        ^
         |        |
         C        D

    Pour réaliser cette connexion, il faudra:
        - établir une connexion (socket) entre A et D
        - envoyer un paquet Connexion à A pour indiquer qu'il souhaite rejoindre le réseau
            ===> le serveur peut refuser la connexion, il devra envoyer un paquet RefusConnexion
        - A envoie un paquet Validation à D pour valider son authentification et lui indiquer la structure du réseau
        - A envoie un paquet NouveauServeur au reste du réseau pour indiquer le nouveau serveur à tous les membres


    Lorsqu'un membre du réseau doit effectuer une conjecture, il devra:
        - envoyer un paquet DemandeEtat à tout le réseau pour connaitre la disponibilité de chacun pour partager au mieux
        - il recevra en reponse un paquet Etat de chaque membre
        - envoyer un paquet Tache aux membres du réseau
            ===> un membre du réseau peut refuser une tâche, il devra envoyer un paquet Refus
        - il recevra en reponse un paquet ReponseTache


    Lorsqu'un membre du réseau non-ROOT (ex: A) souhaite se déconnecter, il devra:
        - envoyer un paquet AnnulationTache pour chaque tâche qu'il a accepté (en cours et en attente)
        - envoyer un paquet Deconnexion à tout le réseau
            ===> ses enfants devront se reconnecter au ROOT

        En déconnectant A, on obtient alors le réseau suivant:
            D ===> ROOT <=== B
                    ^
                    |
                    C
